{"version":3,"sources":["logo.svg","Table.js","Form.js","Api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","Api","data","_this2","fetch","then","result","json","entry","App","characters","filter","character","i","toConsumableArray","concat","className","src_Table","src_Form","src_Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c35036e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nconst TableHeader = () => {\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nconst TableBody = props => {\r\n    const rows = props.characterData.map((row, index) => {\r\n        return(\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td><button onClick={ () => {props.removeCharacter(index)} }>Delete</button></td>\r\n            </tr>\r\n        );    \r\n    })\r\n    return(\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const { characterData, removeCharacter } = this.props;\r\n\r\n        return(\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            name : '',\r\n            job  : ''\r\n        }\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render() {\r\n        const {name, job} = this.state;\r\n\r\n        return(\r\n            <form>\r\n                <label>Name: </label>\r\n                <input type=\"text\" name=\"name\" onChange={this.handleChange} value={this.state.name} />\r\n                <label>Job: </label>\r\n                <input type=\"text\" name=\"job\" onChange={this.handleChange} value={this.state.job} />\r\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\n\r\nclass Api extends Component {\r\n    state = {\r\n        data : []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = 'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*';\r\n\r\n        fetch(url)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    data : result\r\n                })\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state;\r\n\r\n        const result = data.map(( entry, index ) => {\r\n           return <li key={index}>{entry}</li>\r\n        });\r\n\r\n        return(\r\n            <ul>{result}</ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Api;","import React, { Component } from 'react';\nimport Table from './Table.js';\nimport Form from './Form.js';\nimport Api from './Api.js';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\tcharacters : []\n\t};\n\n\tremoveCharacter = index => {\n\t\tconst { characters } = this.state;\n\n\t\tthis.setState({\n\t\t\tcharacters : characters.filter((character, i) => {\n\t\t\t\treturn i !== index;\n\t\t\t})\n\t\t});\n\t}\n\n\thandleSubmit = character => {\n\t\tthis.setState({characters : [...this.state.characters , character] });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Table characterData={this.state.characters} removeCharacter={this.removeCharacter} />\n\t\t\t\t<Form handleSubmit={this.handleSubmit} />\n\t\t\t\t<Api />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}